server:
  forward-headers-strategy: native

spring:
  profiles:
    active: "actuator"
  web:
    resources:
      add-mappings: true

  # mongo
  data:
    mongodb:
      host: ${MONGO_HOST}
      port: ${MONGO_PORT}
      database: ${MONGO_DATABASE}
      username: ${MONGO_USERNAME}
      password: ${MONGO_PASSWORD}
      ssl:
        enabled: false
      uri: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_DATABASE}?authSource=admin

  # jpa
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:ododock;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;
    username: root
    password:
  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        default_batch_fetch_size: 500
    show-sql: true
    generate-ddl: true
  h2:
    console:
      enabled: true
      path: /h2-console

  # mail sender
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL_SENDER_USERNAME}
    password: ${EMAIL_SENDER_SECRET}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # spring security
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: "http://localhost:8080"
      client:
        registration:
          google:
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${HOST_DOMAIN_URI}/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope:
              - https://www.googleapis.com/auth/userinfo.email
              - https://www.googleapis.com/auth/userinfo.profile
          naver:
            client-name: naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${HOST_DOMAIN_URI}/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profileImage
              - gender
              - birthdate
              - ageGroup
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: email
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# docs
springdoc:
  api-docs:
    path: /build/api-spec/openapi3.json
  swagger-ui:
    enabled: true
    path: /swagger-ui.html

app:
  security:
    oauth-callback-uri: "http://localhost:3000/oauth2/callback?sub=%s&provider=%s&access_token=%s&refresh_token=%s"
    basic-auth:
      users:
        - username: ${BASIC_AUTH_USERNAME}
          password: ${BASIC_AUTH_PASSWORD}
  jwt:
    token-expiry-time-unit: "minutes"
    access-token-expiry: 10
    refresh-token-expiry: 30
    refresh-token-early-renewal-period: 15
  storage:
    file-service:
      root-dir: ${FILE_STORAGE_ROOT_DIR}
    s3-client:
      endpoint: ${OBJECT_STORAGE_BASE_URI}
      access-key: ${OBJECT_STORAGE_API_KEY}
      secret-key: ${OBJECT_STORAGE_API_SECRET}
  clients:
    library-curation:
      base-url: ${CURATION_BASE_URI}
      api-key: ${CURATION_API_KEY}
    book-content:
      base-url: ${CONTENT_BASE_URI}
      api-key: ${CONTENT_API_KEY}